version: "3.9"

services:
  # NGINX service for webserver
  webserver:
    build:
      dockerfile: ./.docker/nginx/Dockerfile
    links:
      - wp
      - app
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    volumes:
      # Application
      - ./src:/var/www/html
      # WordPress
      - ./wp:/var/www/wp
      # Configuration
      - ./.docker/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      # Logs
      - ./.docker/nginx/logs:/var/log/nginx
      # SSL and certs
      - ./.docker/nginx/certs:/etc/nginx/certs

  # MYSQL service for database
  database:
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USER}
    image: mysql:8.0
    ports:
      - "3306:3306"
    restart: unless-stopped
    volumes:
      - dbdata:/var/lib/mysql

  # WordPress service for our application
  wp:
    build:
      dockerfile: .docker/php/Dockerfile
    depends_on:
      - database
    environment:
      # WordPress variables
      WORDPRESS_DB_HOST: database:3306
      WORDPRESS_DB_NAME: ${DB_DATABASE}
      WORDPRESS_DB_PASSWORD: ${DB_PASSWORD}
      WORDPRESS_DB_USER: ${DB_USER}

      # Redis variables
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}

      # See https://xdebug.org/docs/all_settings#mode
      XDEBUG_MODE: "${XDEBUG_MODE:-off}"
    extra_hosts:
      # Ensure that host.docker.internal is correctly defined on Linux
      - host.docker.internal:host-gateway
    volumes:
      # WordPress volume
      - ./wp:/var/www/wp
      # Persistent volume for WordPress
      - wpdata:/var/www/wp
      # Mount theme, plugins, uploads, etc. from wp-content
      - ./resources:/var/www/wp/wp-content
      - ./resources/themes:/var/www/wp/wp-content/themes
      - ./resources/plugins:/var/www/wp/wp-content/plugins
      - ./resources/uploads:/var/www/wp/wp-content/uploads
      # xdebug configuration
      - ./.docker/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini:ro

  # PHP service for our application
  app:
    build:
      dockerfile: .docker/php/DockerfileApp
    environment:
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      XDEBUG_MODE: "${XDEBUG_MODE:-off}"
    volumes:
      # Application volume
      - ./src:/var/www/html
      # Mount local theme, plugins, uploads, etc.
      - ./resources:/var/www/html/resources
      # Persistent volume for application
      - appdata:/var/www/html
      # xdebug configuration
      - ./.docker/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini:ro

  # PhpMyAdmin service for database management
  # Navigate to the url provided in the server_name directive to access phpmyadmin
  # Use the credentials provided for the database service, you can find these in .env
  # Example url: http://wp.test:8080
  pma:
    container_name: phpmyadmin
    environment:
      PMA_HOST: database:3306
      PMA_PORT: ${DB_PORT}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    depends_on:
      - database
    image: phpmyadmin:latest
    platform: linux/amd64
    ports:
      - "8080:80"
    restart: unless-stopped

  # Cache service for Redis
  redis:
    image: redis:latest
    ports:
    - "6379:6379"
    restart: unless-stopped

  # Mailhog service for email testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"
      - "8025:8025"
    restart: unless-stopped
    volumes:
      - mhdata:/var/lib/mailhog
      - .docker/mailhog/config:/etc/mailhog
      - .docker/mailhog/mails:/var/mail
      - .docker/mailhog/logs:/var/log/mailhog

# Persistent volumes
volumes:
  appdata:
  dbdata:
  mhdata:
  wpdata:
